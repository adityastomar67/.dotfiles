#!/bin/bash
# ░░░███████╗██╗░░░██╗███╗░░██╗░█████╗░████████╗██╗░█████╗░███╗░░██╗░██████╗
# ░░░██╔════╝██║░░░██║████╗░██║██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║██╔════╝
# ░░░█████╗░░██║░░░██║██╔██╗██║██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║╚█████╗░
# ░░░██╔══╝░░██║░░░██║██║╚████║██║░░██╗░░░██║░░░██║██║░░██║██║╚████║░╚═══██╗
# ██╗██║░░░░░╚██████╔╝██║░╚███║╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║██████╔╝
# ╚═╝╚═╝░░░░░░╚═════╝░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝╚═════╝░

# For Launcing NeoVim and SudoEdit with same command
function v() {
    # [ ! -f $1 ] && nvim $1 && retu gccrn
    # [ -w $1 ] && nvim $1 || sudoedit $1
    file=$1
    if [[ -e $file && ! -w $file ]]; then
        sudoedit $file
    else
        nvim $file
    fi
}

function get_temperature() {
    local response=""
    response=$(curl --silent 'https://api.openweathermap.org/data/2.5/weather?id=5110253&units=imperial&appid=<your_api_key>')
    local status=$(echo $response | jq -r '.cod')
    case $status in
        200) printf "Location: %s %s\n" "$(echo $response | jq '.name') $(echo $response | jq '.sys.country')"
            printf "Forecast: %s\n" "$(echo $response | jq '.weather[].description')"
            printf "Temperature: %.1f°F\n" "$(echo $response | jq '.main.temp')"
            printf "Temp Min: %.1f°F\n" "$(echo $response | jq '.main.temp_min')"
            printf "Temp Max: %.1f°F\n" "$(echo $response | jq '.main.temp_max')"
            ;;
        401) echo "401 error"
            ;;
        *) echo "error"
            ;;
    esac
}

function empty_trash() {
    printf "%s\n" "EMPTYING TRASH";
    sudo rm -rf $HOME/.Trash/files/*;
}

function repo() {
    git init
    if [[ ! -e "./README.md" ]]; then
        touch README.md
    fi
    if [[ ! -e "./.gitignore"  ]]; then
        touch .gitignore
    fi
    git branch -m main
    git remote add origin "$1"
    git add .
    git commit -m "First Commit"
    git push origin HEAD
}

function countdown(){
    date1=$((`date +%s` + $1));
    while [ "$date1" -ge `date +%s` ]; do
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 0.1
    done
}

function stopwatch(){
    date1=`date +%s`;
    while true; do
        echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
        sleep 0.1
    done
}

function touchdir() { mkdir -p "$(dirname "$1")" && touch "$1"; }


function del() {
    ## Recursively delete `passed type' files
    find . -type f -name "$1" -ls -delete
}

## Initialize conda
function cond() {
    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2>/dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

function srt() {
    ## Sorting file's content
    mv "$1" "$1.bak"
    sort "$1.bak" | uniq >$1
    rm "$1.bak"
}

function fs() {
    ## Determine size of a file or total size of a directory
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

function prog() {
    if [ -f "$1" ] ; then
        case $1 in
            *.cpp)       g++ -std=c++20 "$1" && ./a.out && rm -f a.out                   ;;
            *.c)         gcc "$1" && ./a.out && rm -f a.out                              ;;
            *.java)	     javac "$1" && java "$(basename -s .java "$1")" && rm -f *.class ;;
            *.py)        python "$1"                                                     ;;
            *.sh)        bash "$1"                                                       ;;
            *.pl)        perl "$1"                                                       ;;
            *.rb)        ruby "$1"                                                       ;;
            *.go)        go run "$1"                                                     ;;
            *.js)        node "$1"                                                       ;;
            *.php)       php "$1"                                                        ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function ex() {
    ## Function extract for common file formats
    if [ -f "$1" ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *.deb)       ar x $1      ;;
            *.tar.xz)    tar xf $1    ;;
            *.tar.zst)   unzstd $1    ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

## Navigation
function up() {
    local d=""
    local limit="$1"

    # Default to limit of 1
    if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
        limit=1
    fi

    for ((i = 1; i <= limit; i++)); do
        d="../$d"
    done

    # perform cd. Show error if cd fails
    if ! cd "$d"; then
        echo "Couldn't go up $limit dirs."
    fi
}

## Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

    size=$(
    stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
    stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
)

local cmd=""
if ((size < 52428800)) && hash zopfli 2>/dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
else
    if hash pigz 2>/dev/null; then
        cmd="pigz"
    else
        cmd="gzip"
    fi
fi

echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
"${cmd}" -v "${tmpFile}" || return 1
[ -f "${tmpFile}" ] && rm "${tmpFile}"

zippedSize=$(
stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
)

echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

function backupToDrive() {
    cp "$1" /Users/ <username >/Google\ Drive/Config/.zshrc
    echo "New .zshrc backed up to Google Drive."
}

## Editing .zshrc and sourcing
function editZsh() {
    nvim ~/.zshrc
    source ~/.zshrc
    backupToDrive ~/.zshrc
    echo "New .zshrc sourced."
}

## Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

## Create a new React App
function react() {
    npx create-react-app $1
    cd $1
    npm i -D eslint
    npm i -D eslint-config-prettier eslint-plugin-prettier
    npm i -D eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks
    [ -f "~/.eslintrc.json" ] && cp "${HOME}/.eslintrc.json" .
    [ -f "~/.prettierrc.json" ] && cp "${HOME}/.prettierrc" .
    echo $1 >README.md
    rm -rf yarn.lock
    # cd src
    # rm -f App.css App.test.js index.css logo.svg serviceWorker.js
    mkdir components views
    git add -A
    git commit -m "Initial commit."
    cd ..
    clear
    code .
}

## Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@"
    }
fi

## Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

## Git commit browser. needs fzf
function git_log() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
        fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
        --bind "ctrl-m:execute:
            echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}

function ccat() {
    if $2
    then
        pygmentize -g $1 | cat
    else
        pygmentize -g $2 | cat $1
    fi
}

function cless() {
    pygmentize -g $1 | less
}

function cmore() {
    pygmentize -g $1 | more
}

function pacopt() {
    if [[ "$@" == "" ]]; then
        echo "Enter at least one package name!"
    else
        sudo pacman -S --asdeps --needed $(pacman -Si $1 | sed -n '/^Opt/,/^Conf/p' | sed '$d' | sed 's/^Opt.*://g' | sed 's/^\s*//g' | tr '\n' ' ')
    fi
}

function compress-pdf-gray() {
    [ $(command -v gs) ] \
        && gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$2.pdf" "$1.pdf" \
        || echo 'Ghostscript - gs needs to be installed.'
    }

function compress-pdf() {
    local level="screen"
    [[ "$3" != "" ]] && level="$3"
    [ $(command -v gs) ] \
        && gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/"$level" -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$2.pdf" "$1.pdf" \
        || echo 'Ghostscript - gs needs to be installed.'
    }

function redditdw() {
    local name="$(echo $1 | cut -d '/' -f 7)"
    local plus="$(echo $1 | cut -d'/' -f 8)"
    [ $(command -v ffmpeg) ] \
        && ffmpeg -i "$( wget -qO- "https://api.reddit.com/api/info/?id=t3_$name" \
                                    | jq -r .data.children[0].data.secure_media.reddit_video.dash_url \
                                    )" -c copy "$plus.mp4" \
                                    || echo 'ffmpeg needs to be installed.'
                                }

function henc() {
    pushd "$1"
    for file in *; do
        pushd "$file"
        convert "*.jpg" "$file.pdf"
        mv "$file.pdf" "../$file.pdf"
        popd
    done
    popd
}

function color-list() {
    for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

function dw-tarball() {
    curl -Lk "https://api.github.com/repos/$1/$2/tarball" | tar zx
}

function stylua-fmt() {
    local current="$PWD"
    cd "$1"
    [ $(command -v stylua) ] \
        && stylua . \
        || echo 'stylua is not installed'
        cd "$current"
    }

function webm-to-audio {
find . -type f -iname "*.webm" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn -ab 128k -ar 44100 -y "${FILE%.webm}.mp3";' _ '{}' \;
}

function mkv-to-audio {
find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn $' \;
}

function mp4-to-audio() {
find . -type f -name "*.mp4" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -b:a 192K -vn "${FILE%.mp4}.mp3";' _ '{}' \;
}

function rel-syctl() { systemctl $1 daemon-reload }


function base16img() {
convert "$1" -depth 6 +dither -colors 16 -format %c histogram:info: | awk '{print $3}' | cut -c -7
}

function reload_gtk_theme() {
theme=$(gsettings get org.gnome.desktop.interface gtk-theme)
gsettings set org.gnome.desktop.interface gtk-theme ''
sleep 1
gsettings set org.gnome.desktop.interface gtk-theme $theme
}

function montage-vert() {
montage -shadow -background '#4b6576' -geometry +50+50 -tile 1x *.png montage.png
}

function monv-noshade() {
montage -background '#4b6576' -geometry +50+50 -tile 1x *.png montage.png
}

function montage-shot() {
pngs=(*.png)
montage -background '#4b6576' -geometry +25+25 -tile ${#pngs}x *.png montage.png
}

function adbwifi() {
command -v adb &>/dev/null || return
adb devices
echo -n "SERIAL: "
read serial
adb -s $serial tcpip 5555
echo -n "IP: "
read ip
adb connect $ip:5555
}

function regen-theme() {
pushd "$HOME/.bin/regen" || return
[ "$1" ] || regen "radium" &>/dev/null && regen "$1" &>/dev/null
popd || return
}

function fcrofi() {
fc-list | awk -F '[:,]' '{gsub("^ ", "", $2); print $2}' | sort | uniq | rofi -dmenu -p 'Fonts' | tr -d '\n' | xclip
}

function fcfzf() {
fc-list \
    | awk -F '[:,]' '{gsub("^ ", "", $2); print $2}' \
    | sort \
    | uniq \
    | fzf \
    | tr -d '\n' \
    | xclip
}

function p10kstate() {
    local reply
    p10k display -a '*'
    printf '%-32s = %q\n' ${(@kv)reply} | sort
}

function _smooth_fzf() {
    local fname
    local current_dir="$PWD"
    cd "${XDG_CONFIG_HOME:-~/.config}"
    fname="$(fzf)" || return
    $EDITOR "$fname"
    cd "$current_dir"
}

function _sudo_replace_buffer() {
    local old=$1 new=$2 space=${2:+ }

  # if the cursor is positioned in the $old part of the text, make
  # the substitution and leave the cursor after the $new text
  if [[ $CURSOR -le ${#old} ]]; then
      BUFFER="${new}${space}${BUFFER#$old }"
      CURSOR=${#new}
      # otherwise just replace $old with $new in the text before the cursor
  else
      LBUFFER="${new}${space}${LBUFFER#$old }"
  fi
}

function _sudo_command_line() {
    # If line is empty, get the last run command from history
    [[ -z $BUFFER ]] && LBUFFER="$(fc -ln -1)"

  # Save beginning space
  local WHITESPACE=""
  if [[ ${LBUFFER:0:1} = " " ]]; then
      WHITESPACE=" "
      LBUFFER="${LBUFFER:1}"
  fi

  {
      # If $SUDO_EDITOR or $VISUAL are defined, then use that as $EDITOR
      # Else use the default $EDITOR
      local EDITOR=${SUDO_EDITOR:-${VISUAL:-$EDITOR}}

    # If $EDITOR is not set, just toggle the sudo prefix on and off
    if [[ -z "$EDITOR" ]]; then
        case "$BUFFER" in
            sudo\ -e\ *) _sudo_replace_buffer "sudo -e" "" ;;
            sudo\ *) _sudo_replace_buffer "sudo" "" ;;
            *) LBUFFER="sudo $LBUFFER" ;;
        esac
        return
    fi

    # Check if the typed command is really an alias to $EDITOR

    # Get the first part of the typed command
    local cmd="${${(Az)BUFFER}[1]}"
    # Get the first part of the alias of the same name as $cmd, or $cmd if no alias matches
    local realcmd="${${(Az)aliases[$cmd]}[1]:-$cmd}"
    # Get the first part of the $EDITOR command ($EDITOR may have arguments after it)
    local editorcmd="${${(Az)EDITOR}[1]}"

    # Note: ${var:c} makes a $PATH search and expands $var to the full path
    # The if condition is met when:
    # - $realcmd is '$EDITOR'
    # - $realcmd is "cmd" and $EDITOR is "cmd"
    # - $realcmd is "cmd" and $EDITOR is "cmd --with --arguments"
    # - $realcmd is "/path/to/cmd" and $EDITOR is "cmd"
    # - $realcmd is "/path/to/cmd" and $EDITOR is "/path/to/cmd"
    # or
    # - $realcmd is "cmd" and $EDITOR is "cmd"
    # - $realcmd is "cmd" and $EDITOR is "/path/to/cmd"
    # or
    # - $realcmd is "cmd" and $EDITOR is /alternative/path/to/cmd that appears in $PATH
    if [[ "$realcmd" = (\$EDITOR|$editorcmd|${editorcmd:c}) \
        || "${realcmd:c}" = ($editorcmd|${editorcmd:c}) ]] \
        || builtin which -a "$realcmd" | command grep -Fx -q "$editorcmd"; then
            _sudo_replace_buffer "$cmd" "sudo -e"
            return
    fi

    # Check for editor commands in the typed command and replace accordingly
    case "$BUFFER" in
        $editorcmd\ *) _sudo_replace_buffer "$editorcmd" "sudo -e" ;;
        \$EDITOR\ *) _sudo_replace_buffer '$EDITOR' "sudo -e" ;;
        sudo\ -e\ *) _sudo_replace_buffer "sudo -e" "$EDITOR" ;;
        sudo\ *) _sudo_replace_buffer "sudo" "" ;;
        *) LBUFFER="sudo $LBUFFER" ;;
    esac
} always {
# Preserve beginning space
LBUFFER="${WHITESPACE}${LBUFFER}"

    # Redisplay edit buffer (compatibility with zsh-syntax-highlighting)
    zle redisplay
}
}

function _vi_search_fix() {
    zle vi-cmd-mode
    zle .vi-history-search-backward
}

function _default_greeter() {
    c1="\033[1;30m"
    c2="\033[1;31m"
    c3="\033[1;32m"
    c4="\033[1;33m"
    c5="\033[1;34m"
    c6="\033[1;35m"
    c7="\033[1;36m"
    c8="\033[1;37m"
    reset="\033[1;0m"
    printf "\n $c1▇▇ $c2▇▇ $c3▇▇ $c4▇▇ $c5▇▇ $c6▇▇ $c7▇▇ $c8▇▇ $reset\n\n"
}

function _toggle-prompt() {
    case "$1" in
        right) p10k display '*/right'=hide,show ;;
        left) p10k display '*/left'=hide,show ;;
    esac
}

function _toggle-right-prompt() {
    _toggle-prompt right
}

function _toggle-left-prompt() {
    _toggle-prompt left
}

function toppy() {
    history \
        | awk '{
            CMD[$2]++;
            count++;
        } END {
        for (a in CMD)
            print CMD[a] " " CMD[a] / count * 100 "% " a;
        }' \
            | grep -v "./" \
            | column -c3 -s " " -t \
            | sort -nr \
            | nl \
            |  head -n 21
}

if [[ $(command -v lazygit) ]]; then
function lz()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(command cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}
fi

## Not Working correcly...Need to check
# fd --type f --hidden --exclude .git | fzf-tmux -p --reverse | xargs nvim

